====================
Comments
====================

c     Comment
c     Second comment

C     Comment with caps

*     Comment with asterix

*> This snippet is to check that
*
*  comments formatted like this
*
*> aren't nested inside other comments
*

---

(translation_unit
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment))

====================
Line continuations
====================

      PROGRAM
     +foo
      IF (SOMETHING
     +    .AND. SOMETHING_ELSE
     +    .OR. ANOTHER_THING) THEN
        BAR = 2
      END IF
      AAPQ = MAX
     $      / MIN
      END
---

(translation_unit
  (program
    (program_statement
      (name))
    (if_statement
      (parenthesized_expression
        (logical_expression
          (logical_expression
            (identifier)
            (identifier))
          (identifier)))
      (assignment_statement
        (identifier)
        (number_literal))
      (end_if_statement))
    (assignment_statement
      (identifier)
      (math_expression
        (identifier)
        (identifier)))
    (end_program_statement)))

====================
Array arguments
====================

      SUBROUTINE ZTRTTF( A, LDA, ARF )
      INTEGER            LDA
*     .. Array Arguments ..
      COMPLEX*16         A( 0: LDA-1, 0: * ), ARF( 0: * )
      END SUBROUTINE

---

(translation_unit
  (subroutine
    (subroutine_statement
      (name)
      (parameters
        (identifier)
        (identifier)
        (identifier)))
    (variable_declaration
      (intrinsic_type)
      (identifier))
    (comment)
    (variable_declaration
      (intrinsic_type
        (kind
          (number_literal)))
      (sized_declarator
        (identifier)
        (size
          (extent_specifier
            (number_literal)
            (math_expression
              (identifier)
              (number_literal)))
          (extent_specifier
            (number_literal)
            (assumed_size))))
      (sized_declarator
        (identifier)
        (size
          (extent_specifier
            (number_literal)
            (assumed_size)))))
    (end_subroutine_statement)))

========================================
Line continuation string literal
========================================

      print*,'start
     +        stop'
      END

---

(translation_unit
  (program
    (print_statement
      (format_identifier)
      (output_item_list
        (string_literal)))
    (end_program_statement)))

================================================================================
Program
================================================================================

      PROGRAM TEST
      END PROGRAM

      PROGRAM TEST
      END PROGRAM TEST

--------------------------------------------------------------------------------

(translation_unit
  (program
    (program_statement
      (name))
    (end_program_statement))
  (program
    (program_statement
      (name))
    (end_program_statement
      (name))))

================================================================================
Shortest Program
================================================================================

      END

--------------------------------------------------------------------------------

(translation_unit
  (program
    (end_program_statement)))

================================================================================
Interface (explicit)
================================================================================

      module unit_test_module
      private

      use iso_c_binding

      interface assert_equals
        module procedure assert_equals_int
        module procedure assert_equals_real8
      end interface

      real(8), save :: eps = epsilon(1.0d0)/epsilon(1.0)
      logical,save :: all_pass, passing
      character(5) :: nc = achar(27)//'[00m' ! reset color
      character(7) :: gr = achar(27)//'[0;32m' ! green
      character(7) :: rd = achar(27)//'[1;31m' ! red

      public :: assert_equals
      public :: all_pass

      contains

      function assert_equals_real8(val1, val2) result(passed)
        real(8) :: val1, val2
      end function

      function assert_equals_logi(val1, val2) result(passed)
        logical :: val1, val2
      end function
      end module

--------------------------------------------------------------------------------

(translation_unit
  (module
    (module_statement
      (name))
    (private_statement)
    (use_statement
      (module_name))
    (interface
      (interface_statement
        (name))
      (procedure_statement
        (method_name))
      (procedure_statement
        (method_name))
      (end_interface_statement))
    (variable_declaration
      (intrinsic_type
        (kind
          (number_literal)))
      (type_qualifier)
      (init_declarator
        (identifier)
        (math_expression
          (call_expression
            (identifier)
            (argument_list
              (number_literal)))
          (call_expression
            (identifier)
            (argument_list
              (number_literal))))))
    (variable_declaration
      (intrinsic_type)
      (type_qualifier)
      (identifier)
      (identifier))
    (variable_declaration
      (intrinsic_type
        (kind
          (number_literal)))
      (init_declarator
        (identifier)
        (concatenation_expression
          (call_expression
            (identifier)
            (argument_list
              (number_literal)))
          (string_literal))))
    (comment)
    (variable_declaration
      (intrinsic_type
        (kind
          (number_literal)))
      (init_declarator
        (identifier)
        (concatenation_expression
          (call_expression
            (identifier)
            (argument_list
              (number_literal)))
          (string_literal))))
    (comment)
    (variable_declaration
      (intrinsic_type
        (kind
          (number_literal)))
      (init_declarator
        (identifier)
        (concatenation_expression
          (call_expression
            (identifier)
            (argument_list
              (number_literal)))
          (string_literal))))
    (comment)
    (public_statement
      (identifier))
    (public_statement
      (identifier))
    (internal_procedures
      (contains_statement)
      (function
        (function_statement
          (name)
          (parameters
            (identifier)
            (identifier))
          (function_result
            (identifier)))
        (variable_declaration
          (intrinsic_type
            (kind
              (number_literal)))
          (identifier)
          (identifier))
        (end_function_statement))
      (function
        (function_statement
          (name)
          (parameters
            (identifier)
            (identifier))
          (function_result
            (identifier)))
        (variable_declaration
          (intrinsic_type)
          (identifier)
          (identifier))
        (end_function_statement)))
    (end_module_statement)))

================================================================================
Do Label Statement (Obsolescent)
================================================================================

      program test
        do 10 i = 1, 10
          do 10, j = 1, 10
            foo(i, j) = i * j
      10 continue
      end program test

--------------------------------------------------------------------------------

(translation_unit
  (program
    (program_statement
      (name))
    (do_label_statement
      (statement_label_reference)
      (loop_control_expression
        (identifier)
        (number_literal)
        (number_literal)))
    (do_label_statement
      (statement_label_reference)
      (loop_control_expression
        (identifier)
        (number_literal)
        (number_literal)))
    (assignment_statement
      (call_expression
        (identifier)
        (argument_list
          (identifier)
          (identifier)))
      (math_expression
        (identifier)
        (identifier)))
    (statement_label)
    (keyword_statement)
    (end_program_statement
      (name))))

================================================================================
Computed Goto (Obsolescent)
================================================================================

      program test
      goto (10, 20, 30) M
      goto (10, 20, 30) ISAVE(1)
      end program

--------------------------------------------------------------------------------

(translation_unit
  (program
    (program_statement
      (name))
    (keyword_statement
      (statement_label_reference)
      (statement_label_reference)
      (statement_label_reference)
      (identifier))
    (keyword_statement
      (statement_label_reference)
      (statement_label_reference)
      (statement_label_reference)
      (call_expression
        (identifier)
        (argument_list
          (number_literal))))
    (end_program_statement)))

================================================================================
Common Statement
================================================================================

      PROGRAM TEST
      COMMON /blk1/ m, n /blk2/ o
      COMMON /blk3/ a(1), b(2, 3)
      COMMON p
      END PROGRAM

--------------------------------------------------------------------------------

(translation_unit
  (program
    (program_statement
      (name))
    (common_statement
      (variable_group
        (name)
        (identifier)
        (identifier))
      (variable_group
        (name)
        (identifier)))
    (common_statement
      (variable_group
        (name)
        (sized_declarator
          (identifier)
          (size
            (number_literal)))
        (sized_declarator
          (identifier)
          (size
            (number_literal)
            (number_literal)))))
    (common_statement
      (identifier))
    (end_program_statement)))

================================================================================
Do Loops
================================================================================

      PROGRAM TEST
      DO i = 1, 10
        x = 6**x
        OPEN(i, FILE="qwerty")
        CALL MYSUB(i, TEST=.TRUE.)
      END DO

      DO i = 1, UBOUND(arr), step
        CONTINUE
        GOTO 44
      ENDDO

      out44: DO i = 1,INT(SIN(9.0*i))
        DO j = 1, 100, -1
          CYCLE out44
        END DO
      END DO out44

      DO WHILE (is_true)
          j = 0
      END DO

      do i = 1, 10
        if (diff) go to 100
 100  end do

      END PROGRAM

--------------------------------------------------------------------------------

(translation_unit
  (program
    (program_statement
      (name))
    (do_loop_statement
      (loop_control_expression
        (identifier)
        (number_literal)
        (number_literal))
      (assignment_statement
        (identifier)
        (math_expression
          (number_literal)
          (identifier)))
      (open_statement
        (unit_identifier
          (identifier))
        (keyword_argument
          (identifier)
          (string_literal)))
      (subroutine_call
        (identifier)
        (argument_list
          (identifier)
          (keyword_argument
            (identifier)
            (boolean_literal))))
      (end_do_loop_statement))
    (do_loop_statement
      (loop_control_expression
        (identifier)
        (number_literal)
        (call_expression
          (identifier)
          (argument_list
            (identifier)))
        (identifier))
      (keyword_statement)
      (keyword_statement
        (statement_label_reference))
      (end_do_loop_statement))
    (do_loop_statement
      (block_label_start_expression)
      (loop_control_expression
        (identifier)
        (number_literal)
        (call_expression
          (identifier)
          (argument_list
            (call_expression
              (identifier)
              (argument_list
                (math_expression
                  (number_literal)
                  (identifier)))))))
      (do_loop_statement
        (loop_control_expression
          (identifier)
          (number_literal)
          (number_literal)
          (unary_expression
            (number_literal)))
        (keyword_statement
          (identifier))
        (end_do_loop_statement))
      (end_do_loop_statement
        (block_label)))
    (do_loop_statement
      (while_statement
        (parenthesized_expression
          (identifier)))
      (assignment_statement
        (identifier)
        (number_literal))
      (end_do_loop_statement))
    (do_loop_statement
      (loop_control_expression
        (identifier)
        (number_literal)
        (number_literal))
      (if_statement
        (parenthesized_expression
          (identifier))
        (keyword_statement
          (statement_label_reference)))
      (statement_label)
      (end_do_loop_statement))
    (end_program_statement)))

================================================================================
Statement Functions (Obsolescent)
================================================================================

      SUBROUTINE CEBCHVXX( THRESH, PATH )      
      COMPLEX            ZDUM
c     .. Statement Functions ..
      REAL               CABS1
c     ..
c     .. Statement Function Definitions ..
      CABS1( ZDUM ) = ABS( REAL( ZDUM ) ) + ABS( AIMAG( ZDUM ) )

c     .. Parameters ..
      INTEGER            NWISE_I, CWISE_I
      PARAMETER          (NWISE_I = 1, CWISE_I = 1)

      FACT = 'E'
      END SUBROUTINE CEBCHVXX

--------------------------------------------------------------------------------

(translation_unit
  (subroutine
    (subroutine_statement
      (name)
      (parameters
        (identifier)
        (identifier)))
    (variable_declaration
      (intrinsic_type)
      (identifier))
    (comment)
    (variable_declaration
      (intrinsic_type)
      (identifier))
    (comment)
    (comment)
    (statement_function
      (identifier)
      (argument_list
        (identifier))
      (math_expression
        (call_expression
          (identifier)
          (argument_list
            (call_expression
              (identifier)
              (argument_list
                (identifier)))))
        (call_expression
          (identifier)
          (argument_list
            (call_expression
              (identifier)
              (argument_list
                (identifier)))))))
    (comment)
    (variable_declaration
      (intrinsic_type)
      (identifier)
      (identifier))
    (parameter_statement
      (parameter_assignment
        (identifier)
        (number_literal))
      (parameter_assignment
        (identifier)
        (number_literal)))
    (assignment_statement
      (identifier)
      (string_literal))
    (end_subroutine_statement
      (name))))

================================================================================
Space in real literal
================================================================================

      program test
      real :: f = -1. E0
      end program test

--------------------------------------------------------------------------------

(translation_unit
  (program
    (program_statement
      (name))
    (variable_declaration
      (intrinsic_type)
      (init_declarator
        (identifier)
        (unary_expression
          (number_literal))))
    (end_program_statement
      (name))))
